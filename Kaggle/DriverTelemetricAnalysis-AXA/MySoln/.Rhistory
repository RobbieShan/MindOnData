r[4,i+1] = round(sum(r[1:3,i+1]- r[1:3,i]),digits=6)
}
r
round(r,digits=2)
11/16
5/4
9/16
Book1 <- read.csv("G:/Continuing Education/PennState/STAT580/Week7-SOC2/SOC2/Cases/Book1.csv")
View(Book1)
str(Book1)
library(MASS)
attach(Book1)
lm(AvgHeight~.)
lm(AvgHeight~., data=Book1)
fit<-lm(AvgHeight~., data=Book1)
stepAIC(fit,direction="both")
?lm
library(leaps)
?step
full<-lm(AvgHeight~., data=Book1)
null<-lm(AvgHeight~1, data=Book1)
step(null, scope = list(upper=full), data=Book1, direction="both")
step(null, data=Book1, direction="both")
step(null, direction="both")
step(full, direction="both")
hemophilia <- read.table("G:/Continuing Education/PennState/STAT505/Datasets/hemophilia.dat", quote="\"")
View(hemophilia)
install.packages("MVN", lib="C:/Revolution/R-Enterprise-6.2/R-2.15.3/library")
library("MVN", lib.loc="C:/Revolution/R-Enterprise-6.2/R-2.15.3/library")
mvnPlot(hzTest(hemophilia),type="persp",default=TRUE)
mvnPlot(hzTest(hemophilia[,2:3]),type="persp",default=TRUE)
roystonTest(hemophilia,qqplot=TRUE)
data1 <- read.csv("G:/Continuing Education/Research & Presentations/Self - Machine Learning/data1.txt")
View(data1)
library("ISLR", lib.loc="~/R/win-library/2.15")
view(Titanic)
View(Titanic)
plot(Titanic)
plot(Titanic[,c(2,4)])
Titanic[,c(2,4)]
Titanic[,c(2:4)]
Titanic[,2,4]
Titanic[,2]
Titanic[:2]
Titanic[,2]
Titanic[:,2]
str(Titanic)
size(Titanic)
dim(Titanic)
Titanic = as.data.frame(Titanid)
Titanic = as.data.frame(Titanic)
Titanic[,c(2,4)]
plot(Titanic[,c(2,4)])
plot(Titanic[,c(2,5)])
library(help = "datasets")
view(cars)
View(cars)
View(Default)
plot(Default[,3:4])
?plot
ggplot2(Default[,3:4])
library("ggplot2", lib.loc="~/R/win-library/2.15")
ggplot2(Default[,3:4])
ggplot(Default[,3:4])
qplot(Default[,3:4])
qplot(income, balance, data = Default)
qplot(income, balance, data = Default, color=default)
library(MASS)
data1.lda <- lda(default~income + balance,
data = Default)
data1.lda
data1.lda$coeff
data1.lda$scaling
plot(data1.lda)
?lda
length(Default)
dim(Default)
qplot(income, balance, data = Default[500,], color=default)
qplot(income, balance, data = Default[0:500,], color=default)
qplot(income, balance, data = Default[501:1000,], color=default)
testdef <- qplot(income, balance, data = Default[0:500,], color=default)
cvdef <- qplot(income, balance, data = Default[501:1000,], color=default)
data1.lda <- lda(default~income + balance,
data = testdef)
testdef <- Default[0:500,]
cvdef <- Default[501:1000,]
qplot(income, balance, data = testdef, color=default)
qplot(income, balance, data = cvdef, color=default)
data1.lda <- lda(default~income + balance,
data = testdef)
data1.lda
data1.lda$means
data1.lda$scaling
str(data1.lda$means)
as.matrix(data1.lda$means)
as.matrix(data1.lda$means)%*%t(as.vector(data1.lda$scaling))
as.vector(data1.lda$scaling)
dim(as.vector(data1.lda$scaling))
len(as.vector(data1.lda$scaling))
length(as.vector(data1.lda$scaling))
size(as.vector(data1.lda$scaling))
len(as.matrix(data1.lda$scaling))
as.matrix(data1.lda$means)%*%t(as.matrix(data1.lda$scaling))
as.matrix(data1.lda$means)%*%as.matrix(data1.lda$scaling)
plot(data1.lda)
summary(Caravan)
data(iris)
View(iris)
?sample
sample(1:150,75)
n75 <- sample (1:150,75)
testdef <- iris[n75,]
iris = n75
View(iris)
View(iris)
n75 <- sample (1:150,75)
testdef <- iris[n75,]
View9iris
View(iris)
iris[!n75,]
iris
!n75
iris[~n75,]
iris[-which(n75),]
which(n75)
iris[-which(testdef),]
testdef
iris[-c(n75),]
valdef = iris[-c(n75),]
View(valdef)
View(testdef)
n75
qplot(Sepal.Length, Sepal.Width, Petal.Length, data= testdef, color=Species)
library("ggplot2", lib.loc="~/R/win-library/2.15")
qplot(Sepal.Length, Sepal.Width, Petal.Length, data= testdef, color=Species)
?qplot
install.packages("plot3D", lib="C:/Revolution/R-Enterprise-6.2/R-2.15.3/library")
library("plot3D", lib.loc="C:/Revolution/R-Enterprise-6.2/R-2.15.3/library")
?scatter3D
scatter3D(Sepal.Length, Sepal.Width, Petal.Length, data= testdef, col=Species)
View(testdef)
scatter3D(Sepal.Length, Sepal.Width, Petal.Length, data= testdef, col=Species)
attach(testdef)
scatter3D(Sepal.Length, Sepal.Width, Petal.Length, data= testdef, col=Species)
install.packages("rgl", lib="C:/Revolution/R-Enterprise-6.2/R-2.15.3/library")
library("rgl", lib.loc="C:/Revolution/R-Enterprise-6.2/R-2.15.3/library")
plot3D(Sepal.Length, Sepal.Width, Petal.Length, data= testdef, col=Species)
?plot3D
file.show(system.file("NEWS", package="rgl"))
example(surface3d)
example(plot3d)
open3d()
x<- Sepal.Length
plot3D(Sepal.Length, Sepal.Width, Petal.Length, col=Species)
close3d90
close3d9()
close3d()
plot3d
open3d()
plot3d(Sepal.Length, Sepal.Width, Petal.Length, col=Species)
data1.lda <- lda(Species~Sepal.Length + Sepal.Width + Petal.Length
data = testdef)
data1.lda <- lda(Species~Sepal.Length + Sepal.Width + Petal.Length,
data = testdef)
packages(MASS)
package(MASS)
library(MASS)
data1.lda <- lda(Species~Sepal.Length + Sepal.Width + Petal.Length,
data = testdef)
data1.lda
summary(data1.lda)
str(data1.lda)
plot(data1.lda)
names(data1.lda)
data1.lda$xlevels
data1.lda$terms["factors"]
data1.lda$terms$factors
data1.lda$terms
lda.test.pred = predict(data1.lda,testdef)
lda.test.pred
lda.test.pred$x
lda.test.pred$x[1]
lda.test.pred$x[:,1]
lda.test.pred$x[[1]]
lda.test.pred$x[:,1
lda.test.pred$x[:,1]
x = lda.test.pred$x
x
s[1,1]
x[1,1]
x[1,2]
class(x)
x[,1]
x = lda.test.pred$x[,1]
x
lda.test.pred$x[,2]
qplot(ld1, ld2, color=lda.test.pred$class)
ld1 = lda.test.pred$x[,1]
ld2 = lda.test.pred$x[,2]
qplot(ld1, ld2, color=lda.test.pred$class)
plot(data1.lda)
table(lda.test.pred$class,testdef)
table(lda.test.pred$class,testdef$Species)
lda.val.pred = predict(data1.lda,valdef)
vld1 = lda.val.pred$x[,1]
vld2 = lda.val.pred$x[,2]
qplot(vld1, vld2, color=lda.val.pred$class)
table(lda.val.pred$class,valdef$Species)
lda.test.pred = predict(data1.lda,testdef)
tld1 = lda.test.pred$x[,1]
tld2 = lda.test.pred$x[,2]
qplot(tld1, tld2, color=lda.test.pred$class)
table(lda.test.pred$class,testdef$Species)
lda.val.pred = predict(data1.lda,valdef)
vld1 = lda.val.pred$x[,1]
vld2 = lda.val.pred$x[,2]
qplot(vld1, vld2, color=lda.val.pred$class)
table(lda.val.pred$class,valdef$Species)
attach(testdef)
open3d()
plot3d(Sepal.Length, Sepal.Width, Petal.Length, col=Species)
attach(testdef)
open3d()
plot3d(Sepal.Length, Sepal.Width, Petal.Length, col=Species)
attach(valdef)
open3d()
plot3d(Sepal.Length, Sepal.Width, Petal.Length, col=Species)
library("ggplot2", lib.loc="~/R/win-library/2.15")
ratings <- read.delim("G:/Continuing Education/PennState/STAT505/Datasets/ratings.dat", header=FALSE)
View(ratings)
?qplot
qplot(v2,v3,data=ratings)
qplot(V2,V3,data=ratings)
qplot(V2,V3,data=ratings) + geom_point(color=V1)
qplot(V2,V3,data=ratings) + geom_point(color=V1,data=ratings)
attach(ratings)
qplot(V2,V3) + geom_point(color=V1)
?geom_point
qplot(V2,V3, color=V1)
qplot(V2,V3, color=as.factor(V1))
names(ratings)
names(ratings) <- c("Renewal", "Q1Coverage", "Q2Price")
names(ratings)
qplot(V2,V3, color=as.factor(V1))
names(ratings)
View(ratings)
qplot(Q1Coverage,Q2Price, color=as.factor(Renewal))
str(ratings)
qplot(Q1Coverage,Q2Price
)
attach(ratings)
qplot(Q1Coverage,Q2Price, color=as.factor(Renewal))
package(MASS)
library("MASS", lib.loc="~/R/win-library/2.15")
dlda <- lda(Renewal ~ Q1Coverage + Q2Price, data=ratings)
plot(dlda)
predict(dlda,ratings)
pdlda <- predict(dlda,ratings)
table(pdlda$class, ratings$Renewal)
predict(dlda,c(4,6))
a <- data.frame(4,6)
a
names(a) <- names(ratings)[2,3]
names(ratings)
names(ratings)[2:3]
names(a) <- names(ratings)[2:3]
predict(dlda,c(4,6))
predict(dlda,a
)
predict(dlda,a)
dlda
?ln
?log
log(0.8910754)
?lda
dlda <- lda(Renewal ~ Q1Coverage + Q2Price, prior = c(0.4,0.6), data=ratings)
dlda
predict(dlda,a)
data1.lda
lda.val.pred
?predict
?lda.predict
?predict.lda
?mass
?predict.lda()
coef(data1.lda)
data1.lda
?coef
coef(data1.lda)
big8 <- read.table("G:/Continuing Education/PennState/STAT505/Datasets/big8.dat", header=TRUE, quote="\"")
View(big8)
?princomp()
princomp(big8,cor=TRUE)
big8[2,]
big8[,2:]
big8[,2:9]
big8[,2:10]
princomp(big8[,2:10])
princomp(as.matrix(big8[,2:10])
)
princomp(as.data.frame(big8[,2:10]))
?prcomp
prcomp(big8[,2:10])
summary(prcomp(big8[,2:10]))
summary(prcomp(big8[,2:10],scale=TRUE))
princomp(big8[,2:10])
big8[,2:10]
big8[,1:10]
big8[,1:11]
big8[,0:11]
big8[,0:10]
big8[,1:10]
big8[,2:10]
big8[,10:10]
big8[,9:10]
big8[,2:10]
summary(prcomp(big8[,1:10],scale=TRUE))
summary(prcomp(big8[,2:10],scale=TRUE))
prcomp(big8[,2:10],scale=TRUE)
summary(prcomp(big8[,2:10],scale=TRUE))
pc1 <- prcomp(big8[,2:10],scale=TRUE)
str(pc1)
pc1$PC1
pc1[1]
pc1$rotation[1]
pc1$rotation[1:]
pc1$rotation[1,]
pc1$rotation[,1]
big8[,c(2,3,4,6,7)]
pc1 <- prcomp(big8[,c(2,3,4,6,7)],scale=TRUE)
pc1 <- prcomp(big8[,2:10],scale=TRUE)
pc2 <- prcomp(big8[,c(2,3,4,6,7)],scale=TRUE)
summary(pc2)
pc3 <- prcomp(big8[,c(2,3,4,6,7)])
summary(pc3)
pc1
pc2 <- prcomp(big8[,c(2,3,4,6,7)],scale=TRUE)
pc2
summary(pc2)
plot(pc2$rotation[,1],pc2$rotation[,2])
plot(pc2$rotation[,1],pc2$rotation[,2],l=h)
plot(pc2$rotation[,1],pc2$rotation[,2],lines='h')
plot(pc2$rotation[,1],pc2$rotation[,2],l='h')
?plot
plot(pc2$rotation[,1],pc2$rotation[,2],type="l")
plot(pc2$rotation[,1],pc2$rotation[,2],type="h")
plot(pc2$rotation[,1],pc2$rotation[,2],type="v")
plot(pc2$rotation[,1],pc2$rotation[,2],type="l")
pc2 <- prcomp(big8[,c(2,3,4,6,7)],scale=TRUE,center=TRUE)
pc2
plot(pc2$rotation[,1],pc2$rotation[,2],type="l")
pc1 <- prcomp(big8[,2:10],scale=TRUE,center=TRUE)
pc2 <- prcomp(big8[,c(2,3,4,6,7)],scale=TRUE,center=TRUE)
pc1
summary(pc1)
pc2
pc2 <- prcomp(big8[,c(2,3,4,6,7)],scale=TRUE,center=TRUE)
pc2
summary(pc2)
plot
(pc2)
plot(pc2)
plot(pc2$rotations)
plot(pc2$rotation)
loadings
(pc2)
plot(pc2,type="lines")
biplot(fit)
biplot(pc2)
add <- function(x) {
force(x)
function(y) x + y
}
adders2 <- lapply(1:10, add)
adders2[[1]](10)
add <- function(x) {
force(x)
function(y) x + y
}
adders2 <- lapply(1:10, add)
adders2[[1]]
add <- function(x) {
force(x)
function(y) x + y
}
adders2 <- lapply(1:10, add)
adders2[1]
adders2
str(adders2)
add <- function(x) {
force(x)
function(y) x + y
}
adders2 <- lapply(c(1:10,2), add)
adders2[1]
add <- function(x) {
force(x)
function(y) x + y
}
adders2 <- lapply(c(1:10,2), add)
adders2
add <- function(x) {
force(x)
function(y) x + y
}
adders2 <- lapply(c(1:10,9), add)
adders2
c(1:10,9)
add <- function(x) {
force(x)
function(y) x + y
}
adders2 <- lapply(c(1:10), add)
adders2
adders2[[11]][2]
add <- function(x) {
# force(x)
function(y) x + y
}
adders2 <- lapply(c(1:10), add)
adders2[[10]][2]
add <- function(x) {
# force(x)
function(y) x + y
}
adders2 <- lapply(c(1:10), add)
adders2
adders2[[10]][2]
adders2[[10]][10]
add <- function(x) {
function(y) x + y
}
adders2 <- lapply(c(1:10), add)
adders2[[10]][10]
add <- function(x) {
function(y) x + y
}
adders <- lapply(1:10, add)
adders[[1]](10)
add <- function(x) {
function(y) x + y
}
adders2 <- lapply(1:10, add)
adders2[[10]][10]
add <- function(x) {
function(y) x + y
}
adders2 <- lapply(1:10, add)
adders2[[10]](10)
add <- function(x) {
function(y) x + y
}
adders2 <- lapply(1:10, add)
adders2[[1]](10)
adders2
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
drivers
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
drivers
pwd
pwd()
getpwd()
get.pwd()
getwd()
setwd("G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln")
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
drivers
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
drivers
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
drivers
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
?paste0
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
warnings()
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
trip
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
str(t)
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
str(list)
str(trip)
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
t[1]
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
t$x
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
source('G:/Continuing Education/Research & Presentations/Self - Machine Learning/Kaggle/DriverTelemetricAnalysis-AXA/MySoln/EDA.R')
str(t)
str(trip)
